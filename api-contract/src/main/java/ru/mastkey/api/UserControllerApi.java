/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ru.mastkey.api;

import ru.mastkey.model.CreateUserRequest;
import ru.mastkey.model.ErrorResponse;
import ru.mastkey.model.UserResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-11-25T12:44:57.009593+03:00[Europe/Moscow]")
@Validated
@Tag(name = "user-controller", description = "the user-controller API")
public interface UserControllerApi {

    /**
     * POST /api/v1/users/{telegramUserId}/changeCurrentWorkspace
     *
     * @param newWorkspaceName  (required)
     * @param telegramUserId  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "changeCurrentWorkspace",
        tags = { "user-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/users/{telegramUserId}/changeCurrentWorkspace"
    )
    ResponseEntity<Void> changeCurrentWorkspace(
        @NotNull @Parameter(name = "newWorkspaceName", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "newWorkspaceName", required = true) String newWorkspaceName,
        @Parameter(name = "telegramUserId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("telegramUserId") Long telegramUserId
    );


    /**
     * POST /api/v1/users
     *
     * @param createUserRequest  (required)
     * @return OK (status code 200)
     *         or Bad request (status code 400)
     */
    @Operation(
        operationId = "createUser",
        tags = { "user-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = UserResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ErrorResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/users",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<UserResponse> createUser(
        @Parameter(name = "CreateUserRequest", description = "", required = true) @Valid @RequestBody CreateUserRequest createUserRequest
    );

}
