/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.10.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ru.mastkey.api;

import ru.mastkey.model.CreateWorkspaceRequest;
import java.util.UUID;
import ru.mastkey.model.WorkspaceResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-11-27T23:18:56.508809+03:00[Europe/Moscow]", comments = "Generator version: 7.10.0")
@Validated
@Tag(name = "workspace-controller", description = "the workspace-controller API")
public interface WorkspaceControllerApi {

    /**
     * PATCH /api/v1/workspaces/{workspaceId}
     *
     * @param workspaceId  (required)
     * @param newWorkspaceName  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "changeWorkspaceName",
        tags = { "workspace-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = WorkspaceResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/api/v1/workspaces/{workspaceId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<WorkspaceResponse> changeWorkspaceName(
        @Parameter(name = "workspaceId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("workspaceId") UUID workspaceId,
        @NotNull @Parameter(name = "newWorkspaceName", description = "", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "newWorkspaceName", required = true) String newWorkspaceName
    );


    /**
     * POST /api/v1/workspaces
     *
     * @param createWorkspaceRequest  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "createWorkspace",
        tags = { "workspace-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = WorkspaceResponse.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/api/v1/workspaces",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    ResponseEntity<WorkspaceResponse> createWorkspace(
        @Parameter(name = "CreateWorkspaceRequest", description = "", required = true) @Valid @RequestBody CreateWorkspaceRequest createWorkspaceRequest
    );


    /**
     * DELETE /api/v1/workspaces/{workspaceId}
     *
     * @param workspaceId  (required)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "deleteWorkspace",
        tags = { "workspace-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/api/v1/workspaces/{workspaceId}"
    )
    
    ResponseEntity<Void> deleteWorkspace(
        @Parameter(name = "workspaceId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("workspaceId") UUID workspaceId
    );


    /**
     * GET /api/v1/workspaces/users/{telegramUserId}
     *
     * @param telegramUserId  (required)
     * @param pageNumber  (optional)
     * @param pageSize  (optional)
     * @return OK (status code 200)
     */
    @Operation(
        operationId = "getWorkspaces",
        tags = { "workspace-controller" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = WorkspaceResponse.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/api/v1/workspaces/users/{telegramUserId}",
        produces = { "application/json" }
    )
    
    ResponseEntity<List<WorkspaceResponse>> getWorkspaces(
        @Parameter(name = "telegramUserId", description = "", required = true, in = ParameterIn.PATH) @PathVariable("telegramUserId") Long telegramUserId,
        @Parameter(name = "pageNumber", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageNumber", required = false) Integer pageNumber,
        @Parameter(name = "pageSize", description = "", in = ParameterIn.QUERY) @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize
    );

}
