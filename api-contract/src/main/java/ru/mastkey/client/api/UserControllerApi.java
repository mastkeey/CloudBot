/*
 * Cloud Service API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package ru.mastkey.client.api;

import com.fasterxml.jackson.core.type.TypeReference;

import ru.mastkey.client.ApiException;
import ru.mastkey.client.ApiClient;
import ru.mastkey.client.BaseApi;
import ru.mastkey.client.Configuration;
import ru.mastkey.client.Pair;

import ru.mastkey.model.CreateUserRequest;
import ru.mastkey.model.ErrorResponse;
import java.util.UUID;
import ru.mastkey.model.UserResponse;


import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.StringJoiner;

@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-28T00:27:38.668427+03:00[Europe/Moscow]", comments = "Generator version: 7.10.0")
public class UserControllerApi extends BaseApi {

  public UserControllerApi() {
    super(Configuration.getDefaultApiClient());
  }

  public UserControllerApi(ApiClient apiClient) {
    super(apiClient);
  }

  /**
   * 
   * 
   * @param newWorkspaceId  (required)
   * @param telegramUserId  (required)
   * @throws ApiException if fails to make API call
   */
  public void changeCurrentWorkspace(UUID newWorkspaceId, Long telegramUserId) throws ApiException {
    this.changeCurrentWorkspace(newWorkspaceId, telegramUserId, Collections.emptyMap());
  }


  /**
   * 
   * 
   * @param newWorkspaceId  (required)
   * @param telegramUserId  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @throws ApiException if fails to make API call
   */
  public void changeCurrentWorkspace(UUID newWorkspaceId, Long telegramUserId, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = null;
    
    // verify the required parameter 'newWorkspaceId' is set
    if (newWorkspaceId == null) {
      throw new ApiException(400, "Missing the required parameter 'newWorkspaceId' when calling changeCurrentWorkspace");
    }
    
    // verify the required parameter 'telegramUserId' is set
    if (telegramUserId == null) {
      throw new ApiException(400, "Missing the required parameter 'telegramUserId' when calling changeCurrentWorkspace");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/users/{telegramUserId}/changeCurrentWorkspace"
      .replaceAll("\\{" + "telegramUserId" + "\\}", apiClient.escapeString(apiClient.parameterToString(telegramUserId)));

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarQueryParams.addAll(apiClient.parameterToPair("newWorkspaceId", newWorkspaceId));
    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        null
    );
  }

  /**
   * 
   * 
   * @param createUserRequest  (required)
   * @return UserResponse
   * @throws ApiException if fails to make API call
   */
  public UserResponse createUser(CreateUserRequest createUserRequest) throws ApiException {
    return this.createUser(createUserRequest, Collections.emptyMap());
  }


  /**
   * 
   * 
   * @param createUserRequest  (required)
   * @param additionalHeaders additionalHeaders for this call
   * @return UserResponse
   * @throws ApiException if fails to make API call
   */
  public UserResponse createUser(CreateUserRequest createUserRequest, Map<String, String> additionalHeaders) throws ApiException {
    Object localVarPostBody = createUserRequest;
    
    // verify the required parameter 'createUserRequest' is set
    if (createUserRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createUserRequest' when calling createUser");
    }
    
    // create path and map variables
    String localVarPath = "/api/v1/users";

    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    
    localVarHeaderParams.putAll(additionalHeaders);

    
    
    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    TypeReference<UserResponse> localVarReturnType = new TypeReference<UserResponse>() {};
    return apiClient.invokeAPI(
        localVarPath,
        "POST",
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        localVarPostBody,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        localVarReturnType
    );
  }

  @Override
  public <T> T invokeAPI(String url, String method, Object request, TypeReference<T> returnType, Map<String, String> additionalHeaders) throws ApiException {
    String localVarPath = url.replace(apiClient.getBaseURL(), "");
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    List<Pair> localVarQueryParams = new ArrayList<Pair>();
    List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
    Map<String, String> localVarHeaderParams = new HashMap<String, String>();
    Map<String, String> localVarCookieParams = new HashMap<String, String>();
    Map<String, Object> localVarFormParams = new HashMap<String, Object>();

    localVarHeaderParams.putAll(additionalHeaders);

    final String[] localVarAccepts = {
      "application/json"
    };
    final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);

    final String[] localVarContentTypes = {
      "application/json"
    };
    final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);

    String[] localVarAuthNames = new String[] {  };

    return apiClient.invokeAPI(
      localVarPath,
        method,
        localVarQueryParams,
        localVarCollectionQueryParams,
        localVarQueryStringJoiner.toString(),
        request,
        localVarHeaderParams,
        localVarCookieParams,
        localVarFormParams,
        localVarAccept,
        localVarContentType,
        localVarAuthNames,
        returnType
    );
  }
}
